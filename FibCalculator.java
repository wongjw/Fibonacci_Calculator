/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package fibonaccicalculator;

import java.awt.Component;
import javax.swing.JOptionPane;
import java.math.BigDecimal;
import javax.swing.SwingUtilities;


/**
 *
 * @author Johnny
 */
public class FibCalculator extends javax.swing.JFrame {

    public FibCalculator() {
        setTitle("Fibonacci Calculator");
        initComponents();
    }
    
    public static long FibRecursive(int NthTerm)//Recursive Fibonacci Formula
    {
        if(NthTerm == 0)
            return 0;
        else if(NthTerm ==1)
            return 1;
        else
            return FibRecursive(NthTerm - 1) + FibRecursive(NthTerm - 2);
    }
    public static long FibIterative(int NthTerm)//Iterative Fibonacci Formula
    {
        if ((NthTerm == 1) || (NthTerm == 2))
    {
        return 1;
    }
        else
        {
            long prevprev = 1, prev = 1, result  = 0;
            for (long i = 3; i <= NthTerm; i++) 
            {
                result  = prevprev + prev;
                prevprev = prev;
                prev = result ;
            }
            return result ;
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        label1 = new java.awt.Label();
        jButton1 = new javax.swing.JButton();
        nTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        execute = new javax.swing.JButton();
        IterativeNthTerm = new javax.swing.JTextField();
        IterativeElaspedTime = new javax.swing.JTextField();
        NthTermRecursive = new javax.swing.JTextField();
        RecursiveElaspedTime = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        SpeedComparison = new javax.swing.JTextField();
        Speed = new javax.swing.JLabel();
        iterativeButton = new javax.swing.JButton();
        RecursiveButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();

        jLabel6.setText("jLabel6");

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable1);

        label1.setText("label1");

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        nTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nTextFieldActionPerformed(evt);
            }
        });

        jLabel1.setText("N:");

        jLabel2.setText("Nth Term:");

        jLabel3.setText("Elasped Time:");

        execute.setText("Execute");
        execute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeActionPerformed(evt);
            }
        });

        IterativeNthTerm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IterativeNthTermActionPerformed(evt);
            }
        });

        IterativeElaspedTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IterativeElaspedTimeActionPerformed(evt);
            }
        });

        jLabel4.setText("Nth Term:");

        jLabel5.setText("Elasped Time:");

        Speed.setText("Speed Comparison:");

        iterativeButton.setText("Iterative");
        iterativeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iterativeButtonActionPerformed(evt);
            }
        });

        RecursiveButton.setText("Recursive");
        RecursiveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RecursiveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(RecursiveButton)
                            .addComponent(iterativeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(IterativeNthTerm, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(IterativeElaspedTime, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(NthTermRecursive)
                            .addComponent(RecursiveElaspedTime, javax.swing.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE)))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(SpeedComparison, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Speed)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(nTextField))
                                .addComponent(execute, javax.swing.GroupLayout.Alignment.LEADING)))
                        .addContainerGap())))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {IterativeElaspedTime, IterativeNthTerm, NthTermRecursive, RecursiveElaspedTime, SpeedComparison});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {RecursiveButton, iterativeButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(IterativeNthTerm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(IterativeElaspedTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(execute)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(iterativeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(NthTermRecursive, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(RecursiveElaspedTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)))
                    .addComponent(RecursiveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addComponent(Speed)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SpeedComparison, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {RecursiveButton, iterativeButton});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nTextFieldActionPerformed
   
    }//GEN-LAST:event_nTextFieldActionPerformed

    private void executeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeActionPerformed
    int N;
        try{
            //Change the Input to an int
            N = Integer.parseInt(this.nTextField.getText());
            //Change the Input to an int
            
            //Iterative First
            long StartIterative = System.nanoTime();
            String IterativeValue = Long.toString(FibIterative(N));
            long EndIterative = System.nanoTime();
            BigDecimal seconds2 = BigDecimal.valueOf((EndIterative - 
                                                StartIterative)/ 1000000000.00);
            this.IterativeNthTerm.setText(IterativeValue);
            this.IterativeElaspedTime.setText((EndIterative - StartIterative) 
                                + " nanoseconds or " + seconds2 + " seconds.");
        
        //Now Recursive time!
            long StartRecursive = System.nanoTime();
            String RecursiveValue = Long.toString(FibRecursive(N));
            long EndRecursive = System.nanoTime();
            BigDecimal seconds1 = BigDecimal.valueOf((EndRecursive 
                                             - StartRecursive) / 1000000000.00);
            this.NthTermRecursive.setText(RecursiveValue);
            this.RecursiveElaspedTime.setText((EndRecursive - StartRecursive) 
                                + " nanoseconds or " + seconds1 + " seconds.");
    
            
            if((EndRecursive - StartRecursive)>(EndIterative - StartIterative))
            {
                this.SpeedComparison.setText("Iterative is faster "
                        + "than recursive by " + ((EndRecursive - 
                        StartRecursive)-(EndIterative - StartIterative))
                + " nanoseconds");      //Slower Time - Faster Time
            }
            else if((EndIterative - StartIterative)>
                    (EndRecursive - StartRecursive))
            {
            this.SpeedComparison.setText("Recursive is faster "
                    + "than iterative by "
            + ((EndIterative - StartIterative)-(EndRecursive - StartRecursive))
                + " nanoseconds");      //Slower Time - Faster Time
        }
        else{
            this.SpeedComparison.setText("They're the same speed");
            //Speed is the same.
        }
    }
        catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Bad input!",
                    "Error", JOptionPane.ERROR_MESSAGE);
            //If user input something other than an int.
            
        }
        
        
    }//GEN-LAST:event_executeActionPerformed

    private void IterativeElaspedTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IterativeElaspedTimeActionPerformed
       
    }//GEN-LAST:event_IterativeElaspedTimeActionPerformed

    private void IterativeNthTermActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IterativeNthTermActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IterativeNthTermActionPerformed

    private void iterativeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iterativeButtonActionPerformed

        int N;
        try{
            //Only the Iterative Part
           
            N = Integer.parseInt(this.nTextField.getText());
            long StartIterative = System.nanoTime();
            String IterativeValue = Long.toString(FibIterative(N));
            long EndIterative = System.nanoTime();
            BigDecimal seconds2 = BigDecimal.valueOf((EndIterative - StartIterative)
                                            / 1000000000.00);
            this.IterativeNthTerm.setText(IterativeValue);
            this.IterativeElaspedTime.setText((EndIterative - StartIterative) 
                    + " nanoseconds or " + seconds2 + " seconds.");
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Bad input!",
                    "Error", JOptionPane.ERROR_MESSAGE);
            //If user input something other than an int.
    }//GEN-LAST:event_iterativeButtonActionPerformed
    }
    private void RecursiveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RecursiveButtonActionPerformed
        int N;
        //Only the recursive part.
        try{
        N = Integer.parseInt(this.nTextField.getText());
    long StartRecursive = System.nanoTime();
    String RecursiveValue = Long.toString(FibRecursive(N));
    long EndRecursive = System.nanoTime();
    BigDecimal seconds1 = BigDecimal.valueOf((EndRecursive - StartRecursive)
                                            / 1000000000.00);
    this.NthTermRecursive.setText(RecursiveValue);
    this.RecursiveElaspedTime.setText((EndRecursive - StartRecursive) 
                                + " nanoseconds or " + seconds1 + " seconds.");
        }
    catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Bad input!",
                    "Error", JOptionPane.ERROR_MESSAGE);
            //If user input something other than an int.
    }//GEN-LAST:event_RecursiveButtonActionPerformed
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FibCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FibCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FibCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FibCalculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                new FibCalculator().setVisible(true);
                
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField IterativeElaspedTime;
    private javax.swing.JTextField IterativeNthTerm;
    private javax.swing.JTextField NthTermRecursive;
    private javax.swing.JButton RecursiveButton;
    private javax.swing.JTextField RecursiveElaspedTime;
    private javax.swing.JLabel Speed;
    private javax.swing.JTextField SpeedComparison;
    private javax.swing.JButton execute;
    private javax.swing.JButton iterativeButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private java.awt.Label label1;
    private javax.swing.JTextField nTextField;
    // End of variables declaration//GEN-END:variables
}
